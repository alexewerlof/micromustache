{
  "kind": "package",
  "name": "micromustache",
  "summary": [],
  "remarks": [],
  "exports": {
    "asyncRender": {
      "kind": "function",
      "signature": "export function asyncRender(\n  template: Template,\n  scope?: Scope,\n  options?: ICompilerOptions\n): Promise<string>",
      "returnValue": {
        "type": "Promise<string>",
        "description": []
      },
      "parameters": {
        "template": {
          "name": "template",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Template"
        },
        "scope": {
          "name": "scope",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "Scope"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "ICompilerOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "asyncRenderTag": {
      "kind": "function",
      "signature": "export function asyncRenderTag(\n  scope: Scope,\n  options: ICompilerOptions\n): TagFn<Promise<string>>",
      "returnValue": {
        "type": "TagFn<Promise<string>>",
        "description": []
      },
      "parameters": {
        "scope": {
          "name": "scope",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Scope"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "ICompilerOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "compile": {
      "kind": "function",
      "signature": "export function compile(template: Template, options?: ICompilerOptions): Resolver;",
      "returnValue": {
        "type": "Resolver",
        "description": [
          {
            "kind": "text",
            "text": "a function that accepts a scope object and returns a rendered template string template"
          }
        ]
      },
      "parameters": {
        "template": {
          "name": "template",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Template"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "ICompilerOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "This function makes repeated calls shorter by returning a compiler function for a particular template that accepts scope and returns the rendered string."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "It doesn't make the code faster since the compiler still uses render internally."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "compileTag": {
      "kind": "function",
      "signature": "export function compileTag(options: ICompilerOptions): TagFn<Resolver>;",
      "returnValue": {
        "type": "TagFn<Resolver>",
        "description": []
      },
      "parameters": {
        "options": {
          "name": "options",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "ICompilerOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "default": {
      "kind": "function",
      "signature": "export function render(\n  template: Template,\n  scope?: Scope,\n  options?: ICompilerOptions\n): string",
      "returnValue": {
        "type": "string",
        "description": [
          {
            "kind": "text",
            "text": "Template where its variable names replaced with corresponding values. If a value is not found or is invalid, it will be assumed empty string ''. If the value is an object itself, it'll be stringified by JSON. In case of a JSON stringify error the result will look like \"{...}\"."
          }
        ]
      },
      "parameters": {
        "template": {
          "name": "template",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Template"
        },
        "scope": {
          "name": "scope",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "Scope"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "ICompilerOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Replaces every variable inside the template with values provided by scope."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "format": {
      "kind": "function",
      "signature": "export function format<T>(strings: string[], values: any[], valueToString: (value: T) => string): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "strings": {
          "name": "strings",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        },
        "values": {
          "name": "values",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "any[]"
        },
        "valueToString": {
          "name": "valueToString",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "(value: T) => string"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "get": {
      "kind": "function",
      "signature": "export function get(scope: Scope, path: string): any;",
      "returnValue": {
        "type": "any",
        "description": [
          {
            "kind": "text",
            "text": "returns the value or undefined. If path or scope are undefined or scope is null the result is always undefined."
          }
        ]
      },
      "parameters": {
        "scope": {
          "name": "scope",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Scope"
        },
        "path": {
          "name": "path",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Similar to lodash _.get()"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Differences with JavaScript: No support for keys that include "
        },
        {
          "kind": "code",
          "text": "[",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " or "
        },
        {
          "kind": "code",
          "text": "]",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": ". No support for keys that include "
        },
        {
          "kind": "code",
          "text": "'",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " or "
        },
        {
          "kind": "code",
          "text": "\"",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " or `. "
        },
        {
          "kind": "code",
          "text": "foo[bar]",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " is allowed while JavaScript treats "
        },
        {
          "kind": "code",
          "text": "bar",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " as a variable and tries to lookup its value or throws a "
        },
        {
          "kind": "code",
          "text": "ReferenceError",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " if there is no variable called "
        },
        {
          "kind": "code",
          "text": "bar",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": ".  TypeError if the object variable is not an object"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getKeys": {
      "kind": "function",
      "signature": "export function getKeys(scope: Scope, pathArr: string[]): any;",
      "returnValue": {
        "type": "any",
        "description": [
          {
            "kind": "text",
            "text": "returns the value or undefined. If path or scope are undefined or scope is null the result is always undefined."
          }
        ]
      },
      "parameters": {
        "scope": {
          "name": "scope",
          "description": [
            {
              "kind": "text",
              "text": "an object to resolve value from"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "Scope"
        },
        "pathArr": {
          "name": "pathArr",
          "description": [
            {
              "kind": "text",
              "text": "an array of keys that specify the path to the lookup"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Same as get() but expects an array of keys instead of path  TypeError if the scope variable is not an object or the keys don't exist"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ICompilerOptions": {
      "kind": "interface",
      "extends": "IParseOptions",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IParseOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "closeSymbol": {
          "kind": "property",
          "signature": "closeSymbol?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "the string that indicates closing a variable interpolation expression"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "openSymbol": {
          "kind": "property",
          "signature": "openSymbol?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "the string that indicates opening a variable interpolation expression"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IResolverOptions": {
      "kind": "interface",
      "extends": "IStringifyOptions",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "resolveFn": {
          "kind": "property",
          "signature": "resolveFn?: ResolveFn;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ResolveFn",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resolveFnContext": {
          "kind": "property",
          "signature": "resolveFnContext?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IStringifyOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "invalidObj": {
          "kind": "property",
          "signature": "invalidObj?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "an optional string to be used when JSON.stringify fails"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "invalidType": {
          "kind": "property",
          "signature": "invalidType?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "an optional string to be used when the value is an unsupported type"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITagInput": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "strings": {
          "kind": "property",
          "signature": "strings: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "values": {
          "kind": "property",
          "signature": "values: T[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "NameToken": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(varName: string);",
          "parameters": {
            "varName": {
              "name": "varName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "NameToken"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "micromustache",
                "exportName": "NameToken",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "paths": {
          "kind": "property",
          "signature": "readonly paths: string[];",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "varName": {
          "kind": "property",
          "signature": "readonly varName: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "parseString": {
      "kind": "function",
      "signature": "export function parseString(template: string, options?: IParseOptions): ITagInput<string>;",
      "returnValue": {
        "type": "ITagInput<string>",
        "description": [
          {
            "kind": "text",
            "text": "the resulting string"
          }
        ]
      },
      "parameters": {
        "template": {
          "name": "template",
          "description": [
            {
              "kind": "text",
              "text": "the template"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "options": {
          "name": "options",
          "description": [
            {
              "kind": "text",
              "text": "the options form compile()"
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "IParseOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Parse a string and returns an array of variable names and non-processing strings. functions ready for the compiler to go through them. This function could use regular expressions but using simpler searches is faster."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "render": {
      "kind": "function",
      "signature": "export function render(\n  template: Template,\n  scope?: Scope,\n  options?: ICompilerOptions\n): string",
      "returnValue": {
        "type": "string",
        "description": [
          {
            "kind": "text",
            "text": "Template where its variable names replaced with corresponding values. If a value is not found or is invalid, it will be assumed empty string ''. If the value is an object itself, it'll be stringified by JSON. In case of a JSON stringify error the result will look like \"{...}\"."
          }
        ]
      },
      "parameters": {
        "template": {
          "name": "template",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Template"
        },
        "scope": {
          "name": "scope",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "Scope"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "ICompilerOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Replaces every variable inside the template with values provided by scope."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "renderTag": {
      "kind": "function",
      "signature": "export function renderTag(\n  scope: Scope,\n  options: ICompilerOptions\n): TagFn<string>",
      "returnValue": {
        "type": "TagFn<string>",
        "description": []
      },
      "parameters": {
        "scope": {
          "name": "scope",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Scope"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "ICompilerOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "Resolver": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(tokens: ITagInput<NameToken>, options: IResolverOptions);",
          "parameters": {
            "tokens": {
              "name": "tokens",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ITagInput<NameToken>"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IResolverOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Resolver"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "micromustache",
                "exportName": "Resolver",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "asyncRender": {
          "kind": "method",
          "signature": "asyncRender(scope?: Scope, resolveFn?: ResolveFn): Promise<string>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<string>",
            "description": []
          },
          "parameters": {
            "scope": {
              "name": "scope",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "Scope"
            },
            "resolveFn": {
              "name": "resolveFn",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "ResolveFn"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(scope?: Scope, resolveFn?: ResolveFn): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {
            "scope": {
              "name": "scope",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "Scope"
            },
            "resolveFn": {
              "name": "resolveFn",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "ResolveFn"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "stringify": {
      "kind": "function",
      "signature": "export function stringify(value: any, { invalidType, invalidObj }?: IStringifyOptions): string;",
      "returnValue": {
        "type": "string",
        "description": [
          {
            "kind": "text",
            "text": "the value converted to string"
          }
        ]
      },
      "parameters": {
        "value": {
          "name": "value",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "__1": {
          "name": "__1",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "IStringifyOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Converts a value to a string If value is an object with a toString() function, that is used to convert it to string. Otherwise JSON.stringify() is used"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "stringifyTagParams": {
      "kind": "function",
      "signature": "export function stringifyTagParams(strings: string[], values: any[], options?: IStringifyOptions): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "strings": {
          "name": "strings",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        },
        "values": {
          "name": "values",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "any[]"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "IStringifyOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "tokenize": {
      "kind": "function",
      "signature": "export function tokenize(template: Template, options?: IParseOptions): ITagInput<NameToken>;",
      "returnValue": {
        "type": "ITagInput<NameToken>",
        "description": []
      },
      "parameters": {
        "template": {
          "name": "template",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Template"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "IParseOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "toPath": {
      "kind": "function",
      "signature": "export function toPath(path: string): string[];",
      "returnValue": {
        "type": "string[]",
        "description": []
      },
      "parameters": {
        "path": {
          "name": "path",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "unquote": {
      "kind": "function",
      "signature": "export function unquote(value: string): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "value": {
          "name": "value",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    }
  }
}
